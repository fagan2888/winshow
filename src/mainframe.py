#!/usr/bin/env python
# -*- coding: latin-1; py-indent-offset:4 -*-
################################################################################
# 
#   Copyright (C) 2014 Daniel Rodriguez
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
"""Subclass of WinShow, which is generated by wxFormBuilder."""
import itertools
from pubsub import pub
import wx

from maingui import WinShow
from mvcbase import PubSend, PubSubscribe, ViewRole


# Implementing WinShow
@ViewRole
class MainFrame(WinShow):

    @PubSend('OnInit')
    def __init__(self, parent):
        # Init the base class
        WinShow.__init__(self, parent)

        # Operating System Details for column sizes
        winDC = wx.ClientDC(self)
        self.avgcharwidth = winDC.GetCharWidth() # for column lengths

        colwins = [('Hwnd', 8), ('Vis', 0), ('Icon', 0), ('Enabled', 0), ('Title', 255),]
        for icol, colitem in enumerate(colwins):
            colname, colwidth = colitem
            self.m_listCtrlWins.InsertColumn(icol, colname)
            if not colwidth:
                colwidth = len(colname) + 1
            self.m_listCtrlWins.SetColumnWidth(icol, colwidth * self.avgcharwidth)
        

    def DefConfig(self, defconfig):
        self.m_checkBoxTitled.SetValue(defconfig['titled'])
        self.m_checkBoxVisible.SetValue(defconfig['visible'])
        self.m_checkBoxIconized.SetValue(defconfig['iconized'])
        self.m_checkBoxEnabled.SetValue(defconfig['enabled'])
        self.m_checkBoxForeground.SetValue(defconfig['foreground'])
        self.m_checkBoxSelfForeground.SetValue(defconfig['selfforeground'])
        

    @PubSubscribe('hwndinfos')
    def OnHwndInfos(self, msg):
        hwndinfos = msg
        self.m_listCtrlWins.DeleteAllItems()

        for index, hwndinfo in enumerate(hwndinfos):
            col = itertools.count(1)
            newindex = self.m_listCtrlWins.InsertStringItem(index, hex(hwndinfo.hwnd))
            if newindex != -1:
                self.m_listCtrlWins.SetStringItem(newindex, col.next(), str(hwndinfo.visible))
                self.m_listCtrlWins.SetStringItem(newindex, col.next(), str(hwndinfo.iconized))
                self.m_listCtrlWins.SetStringItem(newindex, col.next(), str(hwndinfo.enabled))
                self.m_listCtrlWins.SetStringItem(newindex, col.next(), str(hwndinfo.titled))
                self.m_listCtrlWins.SetItemData(newindex, hwndinfo.hwnd)


    def GetSelectedHwnds(self):
        selected = list()
        index = self.m_listCtrlWins.GetFirstSelected()
        while index != -1:
            hwnd = self.m_listCtrlWins.GetItemData(index)
            selected.append(hwnd)
            index = self.m_listCtrlWins.GetNextSelected(index)
        return selected
